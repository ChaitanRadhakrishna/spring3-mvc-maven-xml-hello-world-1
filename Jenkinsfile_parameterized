pipeline {
    agent any

    parameters {
        gitParameter branchFilter: 'origin/(.*)', defaultValue: 'origin/master', name: 'BRANCH', type: 'PT_BRANCH'
        booleanParam(defaultValue: false, description: 'Build the project with Maven', name: 'mvn_build')
        booleanParam(defaultValue: false, description: 'Publish artifacts to Nexus', name: 'publish_to_nexus')
    }

    tools {
        maven "MVN_HOME"
    }

    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "18.221.24.168:8081/"
        NEXUS_REPOSITORY = "Devops"
        NEXUS_CREDENTIAL_ID = "nexus_server"
    }

    stages {
        stage("clone code") {
            steps {
                script {
                    // Clone the source code
                    git branch: "${params.BRANCH}", url: 'https://github.com/ChaitanRadhakrishna/spring3-mvc-maven-xml-hello-world-1.git'
                }
            }
        }

        stage("mvn build") {
            steps {
                script {
                    if (params.mvn_build) {
                        // Build the project with Maven
                        sh '/usr/share/maven/bin/mvn -Dmaven.test.failure.ignore clean package'
                    } else {
                        echo "No build"
                    }
                }
            }
        }

        stage("publish to nexus") {
            steps {
                script {
                    if (params.publish_to_nexus) {
                        // Read POM xml file using 'readMavenPom' step
                        pom = readMavenPom file: "pom.xml"

                        // Find built artifact under target folder
                        filesByGlob = findFiles(glob: "target/*.${pom.packaging}")

                        // Print some info from the artifact found
                        echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"

                        // Extract the path from the File found
                        artifactPath = filesByGlob[0].path

                        // Assign to a boolean response verifying if the artifact name exists
                        artifactExists = fileExists artifactPath

                        if (artifactExists) {
                            echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}"

                            nexusArtifactUploader(
                                nexusVersion: NEXUS_VERSION,
                                protocol: NEXUS_PROTOCOL,
                                nexusUrl: NEXUS_URL,
                                groupId: pom.groupId,
                                version: "${BUILD_NUMBER}",
                                repository: NEXUS_REPOSITORY,
                                credentialsId: NEXUS_CREDENTIAL_ID,
                                artifacts: [
                                    // Artifact generated such as .jar, .ear, and .war files.
                                    [artifactId: pom.artifactId,
                                    classifier: '',
                                    file: artifactPath,
                                    type: pom.packaging],
                                    // Let's upload the pom.xml file for additional information for Transitive dependencies
                                    [artifactId: pom.artifactId,
                                    classifier: '',
                                    file: "pom.xml",
                                    type: "pom"]
                                ]
                            )
                        } else {
                            error "*** File: ${artifactPath}, could not be found"
                        }
                    } else {
                        echo "No build"
                    }
                }
            }
        }
    }
}
